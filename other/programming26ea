// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-3061683056005047223"},"updated":{"$t":"2016-02-21T22:49:49.680+01:00"},"category":[{"term":"science"},{"term":"games"},{"term":"tools"},{"term":"neuroscience"},{"term":"technology"},{"term":"cool"},{"term":"programming"},{"term":"review"},{"term":"web"},{"term":"hacks"},{"term":"art"},{"term":"cloud"},{"term":"linux"},{"term":"math"},{"term":"news"},{"term":"physics"},{"term":"thoughts"},{"term":"video"}],"title":{"type":"text","$t":"Pepeâ€™s Code Delicias"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/codedelicias.blogspot.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3061683056005047223\/posts\/default\/-\/programming?alt=json-in-script\u0026max-results=6"},{"rel":"alternate","type":"text/html","href":"http:\/\/codedelicias.blogspot.com\/search\/label\/programming"}],"author":[{"name":{"$t":"pepgma"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/04989816169651866782"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"http:\/\/img2.blogblog.com\/img\/b16-rounded.gif"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"3"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"6"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-3061683056005047223.post-2043388896043599985"},"published":{"$t":"2015-07-17T19:24:00.000+02:00"},"updated":{"$t":"2015-09-28T11:18:31.729+02:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"math"},{"scheme":"http://www.blogger.com/atom/ns#","term":"neuroscience"},{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"science"},{"scheme":"http://www.blogger.com/atom/ns#","term":"tools"}],"title":{"type":"text","$t":"Canonical correlation analysis (CCA): a simple example"},"content":{"type":"html","$t":"\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-j_jq04O2rDA\/VggHkIgBaWI\/AAAAAAAAANE\/rkkHqYtOfog\/s1600\/cca.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"328\" src=\"http:\/\/3.bp.blogspot.com\/-j_jq04O2rDA\/VggHkIgBaWI\/AAAAAAAAANE\/rkkHqYtOfog\/s640\/cca.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/en.wikipedia.org\/wiki\/Canonical_correlation\"\u003ECanonical correlation analysis (CCA)\u003C\/a\u003E is a tool to find relations among two sets of random variables. The result of CCA is a new pair of sets of random variables, the canonical variables, which represent potential linear relations between the original sets. As a tool to analyze the relation between two signals or time domain systems, CCA is a powerful method to discover intrinsic linear relations between the two systems.\u003Cbr \/\u003E\u003Cbr \/\u003EA few days ago I had to understand how CCA works for a presentation and found relatively little information online, and almost no simple examples that I could use to visualize it. At the end it resulted to be a rather simple concept. Here I present a simple example with artificial signals I designed for my presentation.\u003Cbr \/\u003E\u003Cbr \/\u003EThe above figure presents two simple systems and the resulting canonical variables and coefficients. The signals were conveniently created to display simple linear relations. Note that x1 and x3 are basically just a scaled version of y1 so one would expect a high correlation among them and potentially a canonical variable would explain that. The variables x2 and y2 also exhibit a relation but this time a rather weak one. The graph to the left represents this relationships with arrows. Note that CCA allows to compare sets with different numbers of variables, just another beauty of the method.\u003Cbr \/\u003E\u003Cbr \/\u003EThe results of CCA for this example are shown no the right of the above figure. The two canonical coefficients show the \"strength\" of the relations between the two sets (the method produces two i.e. the minimum between the number of elements of the two sets: 2 vs 3). The two pairs of canonical \"systems\": (u1, u2) and (v1, v2) represent the linear combinations of variables of each system in the form they produce the strongest correlations among the original sets (x's and y's). As such they can be written as linear equations from the original variables.\u003Cbr \/\u003E\u003Cbr \/\u003EThe Matlab code below was used to produce the figures above. Another for to visualize the relations between the variables is to plot all possible combinations of variables as scatter plots (x's vs y's). That plot is shown after the code.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre\u003E\u003Ccode class=\"matlab\"\u003E%% Create example canonical correlation plots in Matlab\u003Cbr \/\u003E\u003Cbr \/\u003E% Build some simple signals with optional noise (s)\u003Cbr \/\u003Et = 0:0.1:10;\u003Cbr \/\u003El = length(t);\u003Cbr \/\u003Es = 0;\u003Cbr \/\u003EX(:,1) = cos(t) + s*rand(1,l);\u003Cbr \/\u003EX(:,2) = sin(t\/2.5) + s*rand(1,l);\u003Cbr \/\u003EX(:,3) = 1.2*cos(t) + 0.4 + s*rand(1,l) + t*0.0;\u003Cbr \/\u003E\u003Cbr \/\u003EY(:,1) = 0.4*cos(t) + 1.5 + s*rand(1,l);\u003Cbr \/\u003EY(:,2) = sin(t\/2.2+0.4) - 0.4 + t*0.3 + s*rand(1,l);\u003Cbr \/\u003E\u003Cbr \/\u003E% Plot signals over time\u003Cbr \/\u003Efigure(1)\u003Cbr \/\u003Esubplot(2,2,1); plot(t,X); ylim([-1.1 6])\u003Cbr \/\u003Elegend('x_1','x_2','x_3')\u003Cbr \/\u003Esubplot(2,2,3); plot(t,Y(:,1),'m',t,Y(:,2),'k'); ylim([-1.1 6])\u003Cbr \/\u003Elegend('y_1','y_2')\u003Cbr \/\u003E\u003Cbr \/\u003E% It is usually prudent to check the rank, just display it\u003Cbr \/\u003Erank(X)\u003Cbr \/\u003Erank(Y)\u003Cbr \/\u003E\u003Cbr \/\u003E% Perform CCA using Matlabs function\u003Cbr \/\u003E[A,B,r,U,V] = canoncorr(X,Y);\u003Cbr \/\u003E\u003Cbr \/\u003E% Just print out results\u003Cbr \/\u003EA,B,r\u003Cbr \/\u003E\u003Cbr \/\u003Esubplot(2,2,2); plot(t,U); ylim([-3 2])\u003Cbr \/\u003Esubplot(2,2,4); plot(t,V); ylim([-3 2])\u003Cbr \/\u003E\u003Cbr \/\u003E%% Plot canonical variables \u003Cbr \/\u003Efigure(2); clf; \u003Cbr \/\u003Esubplot(2,1,1); hold all; plot(t,X*A); plot(t,U);\u003Cbr \/\u003Esubplot(2,1,2); hold all; plot(t,Y*B); plot(t,V);\u003Cbr \/\u003E\u003Cbr \/\u003E%% Plot signals against each other\u003Cbr \/\u003Efigure(3)\u003Cbr \/\u003Esubplot(3,2,1); plot(X(:,1),Y(:,1),'k.')\u003Cbr \/\u003Esubplot(3,2,3); plot(X(:,2),Y(:,1),'k.')\u003Cbr \/\u003Esubplot(3,2,5); plot(X(:,3),Y(:,1),'k.')\u003Cbr \/\u003Esubplot(3,2,2); plot(X(:,1),Y(:,2),'k.')\u003Cbr \/\u003Esubplot(3,2,4); plot(X(:,2),Y(:,2),'k.')\u003Cbr \/\u003Esubplot(3,2,6); plot(X(:,3),Y(:,2),'k.')\u003Cbr \/\u003E\u003Cbr \/\u003E% Some information about their correlations\u003Cbr \/\u003Ep = corrcoef([X Y]);\u003Cbr \/\u003Ep = p(1:3,4:5)\u003C\/code\u003E\u003C\/pre\u003E\u003Cbr \/\u003EThe scatter plot for figure(3):\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-9vKifd32KJI\/VgkEcIObl7I\/AAAAAAAAANY\/Q9lXivC2s2g\/s1600\/ccascat.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"598\" src=\"http:\/\/1.bp.blogspot.com\/-9vKifd32KJI\/VgkEcIObl7I\/AAAAAAAAANY\/Q9lXivC2s2g\/s640\/ccascat.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3061683056005047223\/posts\/default\/2043388896043599985"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3061683056005047223\/posts\/default\/2043388896043599985"},{"rel":"alternate","type":"text/html","href":"canonical-correlation-analysis-simple.html","title":"Canonical correlation analysis (CCA): a simple example"}],"author":[{"name":{"$t":"pepgma"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/04989816169651866782"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"http:\/\/img2.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/3.bp.blogspot.com\/-j_jq04O2rDA\/VggHkIgBaWI\/AAAAAAAAANE\/rkkHqYtOfog\/s72-c\/cca.png","height":"72","width":"72"}},{"id":{"$t":"tag:blogger.com,1999:blog-3061683056005047223.post-9098746903004512519"},"published":{"$t":"2015-05-26T22:14:00.001+02:00"},"updated":{"$t":"2015-06-27T17:32:32.505+02:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"tools"},{"scheme":"http://www.blogger.com/atom/ns#","term":"web"}],"title":{"type":"text","$t":"Making static GitHub pages with Blogger or other dynamic site generator"},"content":{"type":"html","$t":"\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-t9XfjKcBUSU\/VY6yMz_klaI\/AAAAAAAAALw\/7as9-cHb6SE\/s1600\/statictogithub.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"283\" src=\"http:\/\/2.bp.blogspot.com\/-t9XfjKcBUSU\/VY6yMz_klaI\/AAAAAAAAALw\/7as9-cHb6SE\/s640\/statictogithub.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003EGitHub pages has its own site generator besides the myriad of static generator alternatives. Still there are plenty of dynamic site generators that make the life of the content creator simpler. As long as the site is not too complex several tools exist to convert any website to a static one. One of such tools is \u003Ca href=\"https:\/\/www.httrack.com\/\"\u003EHTTrack\u003C\/a\u003E which can automate the process of downloading the site and resolving the links to a local static copy. Here I provide a bash script (usable in Windows thanks to \u003Ca href=\"http:\/\/msysgit.github.io\/\"\u003Emsysgit\u003C\/a\u003E's shell emulator) to run HTTrack to download a fresh copy of the website and push it to GitHub.\u003Cbr \/\u003E\u003Cbr \/\u003EFor this example an HTTrack profile for your website needs to be created first using the HTTrack GUI. In this example the profile is available on the local folder \u003Cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003Ecodedelicias.blogspot.de\/\u003C\/span\u003E inside the main folder (where the script resides). Make sure this contains a sub-folder called \u003Cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003Ehts-cache\/\u003C\/span\u003E which is created by HTTrack. You will have to play with HTTtrack to find the best way to download your site and keep the links. In my case I just enabled \u003Cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003EHtml in web, images\/other in web\/xxx where xxx is the file extension\u003C\/span\u003E on the \u003Cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003EBuild \u0026gt; local structure settings\u003C\/span\u003E to keep files more organized. In this example a Non-Instal copy of HTTTrack is available also on the main folder.\u003Cbr \/\u003E\u003Cbr \/\u003EThe local git hub repository is on the folder \u003Cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003Epepgma.github.io\/\u003C\/span\u003E inside the main folder.\u003Cbr \/\u003E\u003Cbr \/\u003EI used Blogger as the dynamic site generator. You will have to try for your own with other services\/applications. The script I use to update GitHub pages is:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre\u003E\u003Ccode\u003E#!\/bin\/bash\u003Cbr \/\u003E# update.sh: Update the blog. Saved as .sh so Windows recognizes\u003Cbr \/\u003E# it as an executable script.\u003Cbr \/\u003E\u003Cbr \/\u003E# Delete previous version files, later git will only upload\u003Cbr \/\u003E# changed files from HTTrack's copy\u003Cbr \/\u003Ecd pepgma.github.io\/\u003Cbr \/\u003Erm -rf *.html css ico jpg js other png\u003Cbr \/\u003E\u003Cbr \/\u003E# Update mirror using HTTrack, do not ask to update, just\u003Cbr \/\u003E# do it\u003Cbr \/\u003Ecd ..\/codedelicias.blogspot.de\/\u003Cbr \/\u003E..\/httrack-noinst-3.48.19\/httrack.exe --quiet --update\u003Cbr \/\u003E\u003Cbr \/\u003E# Copy files to repository folder\u003Cbr \/\u003Ecd web\/\u003Cbr \/\u003Ecp -r *.html css ico jpg js other png ..\/..\/pepgma.github.io\/\u003Cbr \/\u003E\u003Cbr \/\u003E# Go to repository\u003Cbr \/\u003Ecd ..\/..\/pepgma.github.io\/\u003Cbr \/\u003E\u003Cbr \/\u003E# # Enable this section only if you have to do some modifications to the mirrored \u003Cbr \/\u003E# # files. In the Blogger case some links in static json queries are broken.\u003Cbr \/\u003E# # I used sed to fix them.\u003Cbr \/\u003E# # Note This produces a warning that can be fixed:\u003Cbr \/\u003E# # http:\/\/stackoverflow.com\/questions\/14313318\/permission-denied-when-sed-in-place-edit-in-mingw\u003Cbr \/\u003E# cd other\/\u003Cbr \/\u003E# URL='http:\\\\\/\\\\\/codedelicias\\.blogspot\\.com\\\\\/20..\\\\\/..\\\\\/'\u003Cbr \/\u003E# sed -i 's|'$URL'||g' *\u003Cbr \/\u003E# cd ..\u003Cbr \/\u003E\u003Cbr \/\u003E# Synchronize mirror with GitHub pages\u003Cbr \/\u003Egit add --all\u003Cbr \/\u003Egit commit -m \"Update\"\u003Cbr \/\u003Egit push\u003Cbr \/\u003E\u003Cbr \/\u003E# See result and wait to finish\u003Cbr \/\u003Eread -n1 -r -p \"Press any key to finish...\"\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E"},"link":[{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3061683056005047223\/posts\/default\/9098746903004512519"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3061683056005047223\/posts\/default\/9098746903004512519"},{"rel":"alternate","type":"text/html","href":"making-static-github-pages-with-blogger.html","title":"Making static GitHub pages with Blogger or other dynamic site generator"}],"author":[{"name":{"$t":"pepgma"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/04989816169651866782"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"http:\/\/img2.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-t9XfjKcBUSU\/VY6yMz_klaI\/AAAAAAAAALw\/7as9-cHb6SE\/s72-c\/statictogithub.png","height":"72","width":"72"}},{"id":{"$t":"tag:blogger.com,1999:blog-3061683056005047223.post-5017703693978767178"},"published":{"$t":"2008-07-12T15:55:00.000+02:00"},"updated":{"$t":"2015-03-22T16:00:42.192+01:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"web"}],"title":{"type":"text","$t":"A short survey of websites and programming languages"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-zM3FB0JlsSE\/VQ7YlsdAoII\/AAAAAAAAAEc\/S92RTWnatck\/s1600\/weblangs.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-zM3FB0JlsSE\/VQ7YlsdAoII\/AAAAAAAAAEc\/S92RTWnatck\/s1600\/weblangs.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EThis is a list of the programing languages some popular websites were originally written on:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EReddit was written in Python\u003C\/li\u003E\u003Cli\u003ETwitter was written in Ruby\u003C\/li\u003E\u003Cli\u003EDigg was written in PHP\u003C\/li\u003E\u003Cli\u003EFacebook was written in PHP\u003C\/li\u003E\u003Cli\u003EGMail was written in C++ \u003Ca href=\"http:\/\/www.postneo.com\/2005\/03\/25\/qa-with-greg-stein\"\u003Eref1\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EBlogger was written in Java \u003Ca href=\"http:\/\/www.postneo.com\/2005\/03\/25\/qa-with-greg-stein\"\u003Eref1\u003C\/a\u003E \u003Ca href=\"http:\/\/www.scripting.com\/davenet\/2003\/02\/20\/commentsOnTheGoogleblogger.html\"\u003Eref2\u003C\/a\u003E \u003Ca href=\"http:\/\/snowdeal.org\/section\/ex_machina\/archives\/2003_02_16_index.html\"\u003Eref3\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EGoogle was probably written partially on C++\u003C\/li\u003E\u003Cli\u003EFlickr was written in PHP\u003C\/li\u003E\u003Cli\u003Edel.icio.us was written in Perl \u003C\/li\u003E\u003C\/ul\u003E\u003C\/div\u003E"},"link":[{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3061683056005047223\/posts\/default\/5017703693978767178"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3061683056005047223\/posts\/default\/5017703693978767178"},{"rel":"alternate","type":"text/html","href":"reddit-is-written-in-python-twitter-is.html","title":"A short survey of websites and programming languages"}],"author":[{"name":{"$t":"pepgma"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/04989816169651866782"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"http:\/\/img2.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-zM3FB0JlsSE\/VQ7YlsdAoII\/AAAAAAAAAEc\/S92RTWnatck\/s72-c\/weblangs.png","height":"72","width":"72"}}]}});